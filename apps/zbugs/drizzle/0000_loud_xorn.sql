-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TABLE IF NOT EXISTS "user" (
	"id" varchar PRIMARY KEY NOT NULL,
	"login" varchar NOT NULL,
	"name" varchar NOT NULL,
	"avatar" varchar,
	"role" varchar DEFAULT 'user' NOT NULL,
	"githubID" integer NOT NULL
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "issue" (
	"id" varchar PRIMARY KEY NOT NULL,
	"shortID" integer GENERATED BY DEFAULT AS IDENTITY (sequence name ""issue_shortID_seq"" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 3000),
	"title" varchar NOT NULL,
	"open" boolean NOT NULL,
	"modified" double precision DEFAULT (EXTRACT(epoch FROM CURRENT_TIMESTAMP) * (1000)::numeric),
	"created" double precision DEFAULT (EXTRACT(epoch FROM CURRENT_TIMESTAMP) * (1000)::numeric),
	"creatorID" varchar NOT NULL,
	"description" text DEFAULT '',
	"labelIDs" text
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "comment" (
	"id" varchar PRIMARY KEY NOT NULL,
	"issueID" varchar,
	"created" double precision,
	"body" text NOT NULL,
	"creatorID" varchar
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "label" (
	"id" varchar PRIMARY KEY NOT NULL,
	"name" varchar NOT NULL
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "issueLabel" (
	"id" varchar PRIMARY KEY NOT NULL,
	"labelID" varchar,
	"issueID" varchar
);
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "issue" ADD CONSTRAINT "issue_creatorID_fkey" FOREIGN KEY ("creatorID") REFERENCES "public"."user"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "comment" ADD CONSTRAINT "comment_issueID_fkey" FOREIGN KEY ("issueID") REFERENCES "public"."issue"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "comment" ADD CONSTRAINT "comment_creatorID_fkey" FOREIGN KEY ("creatorID") REFERENCES "public"."user"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "issueLabel" ADD CONSTRAINT "issueLabel_labelID_fkey" FOREIGN KEY ("labelID") REFERENCES "public"."label"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "issueLabel" ADD CONSTRAINT "issueLabel_issueID_fkey" FOREIGN KEY ("issueID") REFERENCES "public"."issue"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
CREATE UNIQUE INDEX IF NOT EXISTS "user_githubid_idx" ON "user" USING btree ("githubID");--> statement-breakpoint
CREATE UNIQUE INDEX IF NOT EXISTS "user_login_idx" ON "user" USING btree ("login");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "issue_created_idx" ON "issue" USING btree ("created");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "issue_modified_idx" ON "issue" USING btree ("modified");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "issue_open_modified_idx" ON "issue" USING btree ("open","modified");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "comment_issueid_idx" ON "comment" USING btree ("issueID");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "issuelabel_issueid_idx" ON "issueLabel" USING btree ("issueID");
*/