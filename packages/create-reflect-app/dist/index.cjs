"use strict";const prompts=require("@clack/prompts"),color=require("picocolors"),fs=require("node:fs"),path=require("node:path"),node_url=require("node:url"),templateDir=path.resolve(node_url.fileURLToPath(typeof document>"u"?new(require("url")).URL("file:"+__filename).href:document.currentScript&&document.currentScript.src||new URL("index.cjs",document.baseURI).href),"../..","template");async function main(){console.clear(),prompts.intro(`${color.bgCyan(color.black("Reflect: create-reflect-app"))}`);const e=await prompts.text({message:"Where should we create your project?",placeholder:"./my-reflect-app",validate:isValidPackageName});prompts.isCancel(e)&&(prompts.cancel("Operation cancelled."),process.exit(0));const t=prompts.spinner();t.start("Copying files"),copyDir(templateDir,e),t.stop("Copied files"),prompts.outro(`${color.underline(color.cyan("https://reflect.net/contact"))}`)}function isValidPackageName(e){if(!/^(?:@[a-z\d\-*~][a-z\d\-*._~]*\/)?[a-z\d\-~][a-z\d\-._~]*$/.test(e))return"Invalid project name."}function copy(e,t){fs.statSync(e).isDirectory()?copyDir(e,t):fs.copyFileSync(e,t)}function copyDir(e,t){fs.mkdirSync(t,{recursive:!0});for(const c of fs.readdirSync(e)){const r=path.resolve(e,c),n=path.resolve(t,c);copy(r,n)}}main().catch(console.error);
